[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "pprint",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pprint",
        "description": "pprint",
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "gym",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gym",
        "description": "gym",
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "__editable___highway_env_1_4_finder",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "__editable___highway_env_1_4_finder",
        "description": "__editable___highway_env_1_4_finder",
        "detail": "__editable___highway_env_1_4_finder",
        "documentation": {}
    },
    {
        "label": "DQN",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "DQN",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "DQN",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "DDPG",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "DQN",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "DDPG",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "DQN",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "DDPG",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "DQN",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "DDPG",
        "importPath": "stable_baselines3",
        "description": "stable_baselines3",
        "isExtraImport": true,
        "detail": "stable_baselines3",
        "documentation": {}
    },
    {
        "label": "register",
        "importPath": "gym.envs.registration",
        "description": "gym.envs.registration",
        "isExtraImport": true,
        "detail": "gym.envs.registration",
        "documentation": {}
    },
    {
        "label": "register",
        "importPath": "gym.envs.registration",
        "description": "gym.envs.registration",
        "isExtraImport": true,
        "detail": "gym.envs.registration",
        "documentation": {}
    },
    {
        "label": "register",
        "importPath": "gym.envs.registration",
        "description": "gym.envs.registration",
        "isExtraImport": true,
        "detail": "gym.envs.registration",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "highway_env",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "highway_env",
        "description": "highway_env",
        "detail": "highway_env",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "highway_env",
        "description": "highway_env",
        "isExtraImport": true,
        "detail": "highway_env",
        "documentation": {}
    },
    {
        "label": "AbstractEnv",
        "importPath": "highway_env.envs.common.abstract",
        "description": "highway_env.envs.common.abstract",
        "isExtraImport": true,
        "detail": "highway_env.envs.common.abstract",
        "documentation": {}
    },
    {
        "label": "MultiAgentWrapper",
        "importPath": "highway_env.envs.common.abstract",
        "description": "highway_env.envs.common.abstract",
        "isExtraImport": true,
        "detail": "highway_env.envs.common.abstract",
        "documentation": {}
    },
    {
        "label": "LineType",
        "importPath": "highway_env.road.lane",
        "description": "highway_env.road.lane",
        "isExtraImport": true,
        "detail": "highway_env.road.lane",
        "documentation": {}
    },
    {
        "label": "StraightLane",
        "importPath": "highway_env.road.lane",
        "description": "highway_env.road.lane",
        "isExtraImport": true,
        "detail": "highway_env.road.lane",
        "documentation": {}
    },
    {
        "label": "CircularLane",
        "importPath": "highway_env.road.lane",
        "description": "highway_env.road.lane",
        "isExtraImport": true,
        "detail": "highway_env.road.lane",
        "documentation": {}
    },
    {
        "label": "AbstractLane",
        "importPath": "highway_env.road.lane",
        "description": "highway_env.road.lane",
        "isExtraImport": true,
        "detail": "highway_env.road.lane",
        "documentation": {}
    },
    {
        "label": "RegulatedRoad",
        "importPath": "highway_env.road.regulation",
        "description": "highway_env.road.regulation",
        "isExtraImport": true,
        "detail": "highway_env.road.regulation",
        "documentation": {}
    },
    {
        "label": "RoadNetwork",
        "importPath": "highway_env.road.road",
        "description": "highway_env.road.road",
        "isExtraImport": true,
        "detail": "highway_env.road.road",
        "documentation": {}
    },
    {
        "label": "Vehicle",
        "importPath": "highway_env.vehicle.kinematics",
        "description": "highway_env.vehicle.kinematics",
        "isExtraImport": true,
        "detail": "highway_env.vehicle.kinematics",
        "documentation": {}
    },
    {
        "label": "ControlledVehicle",
        "importPath": "highway_env.vehicle.controller",
        "description": "highway_env.vehicle.controller",
        "isExtraImport": true,
        "detail": "highway_env.vehicle.controller",
        "documentation": {}
    },
    {
        "label": "gymnasium",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gymnasium",
        "description": "gymnasium",
        "detail": "gymnasium",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "multi_agent.hetero_highway_train",
        "description": "multi_agent.hetero_highway_train",
        "peekOfCode": "env = gym.make(\"highway-hetero-v0\")\npprint.pprint(env.config)\nenv.config['controlled_vehicles'] = 3\nobs = env.reset()\nmodel = DQN('MlpPolicy', env,\n             policy_kwargs=dict(net_arch=[256, 256]),\n             learning_rate=5e-4,\n             buffer_size=15000,\n             learning_starts=200,\n             batch_size=2048,",
        "detail": "multi_agent.hetero_highway_train",
        "documentation": {}
    },
    {
        "label": "env.config['controlled_vehicles']",
        "kind": 5,
        "importPath": "multi_agent.hetero_highway_train",
        "description": "multi_agent.hetero_highway_train",
        "peekOfCode": "env.config['controlled_vehicles'] = 3\nobs = env.reset()\nmodel = DQN('MlpPolicy', env,\n             policy_kwargs=dict(net_arch=[256, 256]),\n             learning_rate=5e-4,\n             buffer_size=15000,\n             learning_starts=200,\n             batch_size=2048,\n             gamma=0.8,\n             train_freq=1,",
        "detail": "multi_agent.hetero_highway_train",
        "documentation": {}
    },
    {
        "label": "obs",
        "kind": 5,
        "importPath": "multi_agent.hetero_highway_train",
        "description": "multi_agent.hetero_highway_train",
        "peekOfCode": "obs = env.reset()\nmodel = DQN('MlpPolicy', env,\n             policy_kwargs=dict(net_arch=[256, 256]),\n             learning_rate=5e-4,\n             buffer_size=15000,\n             learning_starts=200,\n             batch_size=2048,\n             gamma=0.8,\n             train_freq=1,\n             gradient_steps=1,",
        "detail": "multi_agent.hetero_highway_train",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "multi_agent.hetero_highway_train",
        "description": "multi_agent.hetero_highway_train",
        "peekOfCode": "model = DQN('MlpPolicy', env,\n             policy_kwargs=dict(net_arch=[256, 256]),\n             learning_rate=5e-4,\n             buffer_size=15000,\n             learning_starts=200,\n             batch_size=2048,\n             gamma=0.8,\n             train_freq=1,\n             gradient_steps=1,\n             target_update_interval=50,",
        "detail": "multi_agent.hetero_highway_train",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "multi_agent.hetero_highway_train",
        "description": "multi_agent.hetero_highway_train",
        "peekOfCode": "model = DQN.load(\"highway_dqn/model\")    # load modle\nwhile True:\n    done = truncated = False\n    obs = env.reset()\n    epoch = 1\n    id = 1\n    while not (done or truncated):\n        action, _states = model.predict(obs, deterministic=True)\n        obs, reward, done, truncated, info = env.step(action)\n        images = env.render()",
        "detail": "multi_agent.hetero_highway_train",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "multi_agent.hetero_intersection_train",
        "description": "multi_agent.hetero_intersection_train",
        "peekOfCode": "env = gym.make(\"intersection-multi-agent-v0\")\npprint.pprint(env.config)\nenv.config['controlled_vehicles'] = 3\nobs = env.reset()\nmodel = DQN('MlpPolicy', env,\n             policy_kwargs=dict(net_arch=[256, 256]),\n             learning_rate=5e-4,\n             buffer_size=15000,\n             learning_starts=200,\n             batch_size=2048,",
        "detail": "multi_agent.hetero_intersection_train",
        "documentation": {}
    },
    {
        "label": "env.config['controlled_vehicles']",
        "kind": 5,
        "importPath": "multi_agent.hetero_intersection_train",
        "description": "multi_agent.hetero_intersection_train",
        "peekOfCode": "env.config['controlled_vehicles'] = 3\nobs = env.reset()\nmodel = DQN('MlpPolicy', env,\n             policy_kwargs=dict(net_arch=[256, 256]),\n             learning_rate=5e-4,\n             buffer_size=15000,\n             learning_starts=200,\n             batch_size=2048,\n             gamma=0.8,\n             train_freq=1,",
        "detail": "multi_agent.hetero_intersection_train",
        "documentation": {}
    },
    {
        "label": "obs",
        "kind": 5,
        "importPath": "multi_agent.hetero_intersection_train",
        "description": "multi_agent.hetero_intersection_train",
        "peekOfCode": "obs = env.reset()\nmodel = DQN('MlpPolicy', env,\n             policy_kwargs=dict(net_arch=[256, 256]),\n             learning_rate=5e-4,\n             buffer_size=15000,\n             learning_starts=200,\n             batch_size=2048,\n             gamma=0.8,\n             train_freq=1,\n             gradient_steps=1,",
        "detail": "multi_agent.hetero_intersection_train",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "multi_agent.hetero_intersection_train",
        "description": "multi_agent.hetero_intersection_train",
        "peekOfCode": "model = DQN('MlpPolicy', env,\n             policy_kwargs=dict(net_arch=[256, 256]),\n             learning_rate=5e-4,\n             buffer_size=15000,\n             learning_starts=200,\n             batch_size=2048,\n             gamma=0.8,\n             train_freq=1,\n             gradient_steps=1,\n             target_update_interval=50,",
        "detail": "multi_agent.hetero_intersection_train",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "multi_agent.hetero_intersection_train",
        "description": "multi_agent.hetero_intersection_train",
        "peekOfCode": "model = DQN.load(\"intersection_dqn/model\")\nwhile True:\n    done = truncated = False\n    obs = env.reset()\n    epoch = 1\n    id = 1\n    while not (done or truncated):\n        action, _states = model.predict(obs, deterministic=True)\n        obs, reward, done, truncated, info = env.step(action)\n        images = env.render(mode='rgb_array')",
        "detail": "multi_agent.hetero_intersection_train",
        "documentation": {}
    },
    {
        "label": "IntersectionEnv",
        "kind": 6,
        "importPath": "multi_agent.intersection_env",
        "description": "multi_agent.intersection_env",
        "peekOfCode": "class IntersectionEnv(AbstractEnv):\n    ACTIONS: Dict[int, str] = {\n        0: 'SLOWER',\n        1: 'IDLE',\n        2: 'FASTER'\n    }\n    ACTIONS_INDEXES = {v: k for k, v in ACTIONS.items()}\n    @classmethod\n    def default_config(cls) -> dict:\n        config = super().default_config()",
        "detail": "multi_agent.intersection_env",
        "documentation": {}
    },
    {
        "label": "MultiAgentIntersectionEnv",
        "kind": 6,
        "importPath": "multi_agent.intersection_env",
        "description": "multi_agent.intersection_env",
        "peekOfCode": "class MultiAgentIntersectionEnv(IntersectionEnv):\n    @classmethod\n    def default_config(cls) -> dict:\n        config = super().default_config()\n        config.update({\n            \"action\": {\n                 \"type\": \"MultiAgentAction\",\n                 \"action_config\": {\n                     \"type\": \"DiscreteMetaAction\",\n                     \"lateral\": False,",
        "detail": "multi_agent.intersection_env",
        "documentation": {}
    },
    {
        "label": "ContinuousIntersectionEnv",
        "kind": 6,
        "importPath": "multi_agent.intersection_env",
        "description": "multi_agent.intersection_env",
        "peekOfCode": "class ContinuousIntersectionEnv(IntersectionEnv):\n    @classmethod\n    def default_config(cls) -> dict:\n        config = super().default_config()\n        config.update({\n            \"observation\": {\n                \"type\": \"Kinematics\",\n                \"vehicles_count\": 5,\n                \"features\": [\"presence\", \"x\", \"y\", \"vx\", \"vy\", \"long_off\", \"lat_off\", \"ang_off\"],\n            },",
        "detail": "multi_agent.intersection_env",
        "documentation": {}
    },
    {
        "label": "TupleMultiAgentIntersectionEnv",
        "kind": 5,
        "importPath": "multi_agent.intersection_env",
        "description": "multi_agent.intersection_env",
        "peekOfCode": "TupleMultiAgentIntersectionEnv = MultiAgentWrapper(MultiAgentIntersectionEnv)\nregister(\n    id='intersection-v0',\n    entry_point='highway_env.envs:IntersectionEnv',\n)\nregister(\n    id='intersection-v1',\n    entry_point='highway_env.envs:ContinuousIntersectionEnv',\n)\nregister(",
        "detail": "multi_agent.intersection_env",
        "documentation": {}
    },
    {
        "label": "test_env_modified",
        "kind": 5,
        "importPath": "single_agent.single_highway_modified_test",
        "description": "single_agent.single_highway_modified_test",
        "peekOfCode": "test_env_modified = gym.make(\"highway-v0\", render_mode='human')\ntest_env_modified.config['lanes_count'] = 2\ntest_env_modified.config['vehicles_counts'] = 100\n# Load and test saved model\nmodel = DQN.load(\"COMP0124_dqn/model_highway_modified\")\n# test the model\nepisode_rewards_modified = []\nnum_episodes = 20\nfor episode in range(num_episodes):\n  done = truncated = False",
        "detail": "single_agent.single_highway_modified_test",
        "documentation": {}
    },
    {
        "label": "test_env_modified.config['lanes_count']",
        "kind": 5,
        "importPath": "single_agent.single_highway_modified_test",
        "description": "single_agent.single_highway_modified_test",
        "peekOfCode": "test_env_modified.config['lanes_count'] = 2\ntest_env_modified.config['vehicles_counts'] = 100\n# Load and test saved model\nmodel = DQN.load(\"COMP0124_dqn/model_highway_modified\")\n# test the model\nepisode_rewards_modified = []\nnum_episodes = 20\nfor episode in range(num_episodes):\n  done = truncated = False\n  obs, info = test_env_modified.reset()",
        "detail": "single_agent.single_highway_modified_test",
        "documentation": {}
    },
    {
        "label": "test_env_modified.config['vehicles_counts']",
        "kind": 5,
        "importPath": "single_agent.single_highway_modified_test",
        "description": "single_agent.single_highway_modified_test",
        "peekOfCode": "test_env_modified.config['vehicles_counts'] = 100\n# Load and test saved model\nmodel = DQN.load(\"COMP0124_dqn/model_highway_modified\")\n# test the model\nepisode_rewards_modified = []\nnum_episodes = 20\nfor episode in range(num_episodes):\n  done = truncated = False\n  obs, info = test_env_modified.reset()\n  total_rewards_modified = 0",
        "detail": "single_agent.single_highway_modified_test",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "single_agent.single_highway_modified_test",
        "description": "single_agent.single_highway_modified_test",
        "peekOfCode": "model = DQN.load(\"COMP0124_dqn/model_highway_modified\")\n# test the model\nepisode_rewards_modified = []\nnum_episodes = 20\nfor episode in range(num_episodes):\n  done = truncated = False\n  obs, info = test_env_modified.reset()\n  total_rewards_modified = 0\n  while not (done or truncated):\n    action, _states = model.predict(obs, deterministic=True)",
        "detail": "single_agent.single_highway_modified_test",
        "documentation": {}
    },
    {
        "label": "episode_rewards_modified",
        "kind": 5,
        "importPath": "single_agent.single_highway_modified_test",
        "description": "single_agent.single_highway_modified_test",
        "peekOfCode": "episode_rewards_modified = []\nnum_episodes = 20\nfor episode in range(num_episodes):\n  done = truncated = False\n  obs, info = test_env_modified.reset()\n  total_rewards_modified = 0\n  while not (done or truncated):\n    action, _states = model.predict(obs, deterministic=True)\n    obs, reward, done, truncated, info = test_env_modified.step(action)\n    total_rewards_modified += reward",
        "detail": "single_agent.single_highway_modified_test",
        "documentation": {}
    },
    {
        "label": "num_episodes",
        "kind": 5,
        "importPath": "single_agent.single_highway_modified_test",
        "description": "single_agent.single_highway_modified_test",
        "peekOfCode": "num_episodes = 20\nfor episode in range(num_episodes):\n  done = truncated = False\n  obs, info = test_env_modified.reset()\n  total_rewards_modified = 0\n  while not (done or truncated):\n    action, _states = model.predict(obs, deterministic=True)\n    obs, reward, done, truncated, info = test_env_modified.step(action)\n    total_rewards_modified += reward\n    test_env_modified.render()",
        "detail": "single_agent.single_highway_modified_test",
        "documentation": {}
    },
    {
        "label": "env_modified",
        "kind": 5,
        "importPath": "single_agent.single_highway_modified_train",
        "description": "single_agent.single_highway_modified_train",
        "peekOfCode": "env_modified = gym.make(\"highway-fast-v0\", render_mode='human')\nenv_modified.config['lanes_count'] = 2\nenv_modified.config['vehicles_counts'] = 100\n# Initialize the DQN model for training\nmodel = DQN('MlpPolicy', env_modified,\n              policy_kwargs=dict(net_arch=[256, 256]),\n              learning_rate=5e-4,\n              buffer_size=15000,\n              learning_starts=200,\n              batch_size=32,",
        "detail": "single_agent.single_highway_modified_train",
        "documentation": {}
    },
    {
        "label": "env_modified.config['lanes_count']",
        "kind": 5,
        "importPath": "single_agent.single_highway_modified_train",
        "description": "single_agent.single_highway_modified_train",
        "peekOfCode": "env_modified.config['lanes_count'] = 2\nenv_modified.config['vehicles_counts'] = 100\n# Initialize the DQN model for training\nmodel = DQN('MlpPolicy', env_modified,\n              policy_kwargs=dict(net_arch=[256, 256]),\n              learning_rate=5e-4,\n              buffer_size=15000,\n              learning_starts=200,\n              batch_size=32,\n              gamma=0.8,",
        "detail": "single_agent.single_highway_modified_train",
        "documentation": {}
    },
    {
        "label": "env_modified.config['vehicles_counts']",
        "kind": 5,
        "importPath": "single_agent.single_highway_modified_train",
        "description": "single_agent.single_highway_modified_train",
        "peekOfCode": "env_modified.config['vehicles_counts'] = 100\n# Initialize the DQN model for training\nmodel = DQN('MlpPolicy', env_modified,\n              policy_kwargs=dict(net_arch=[256, 256]),\n              learning_rate=5e-4,\n              buffer_size=15000,\n              learning_starts=200,\n              batch_size=32,\n              gamma=0.8,\n              train_freq=1,",
        "detail": "single_agent.single_highway_modified_train",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "single_agent.single_highway_modified_train",
        "description": "single_agent.single_highway_modified_train",
        "peekOfCode": "model = DQN('MlpPolicy', env_modified,\n              policy_kwargs=dict(net_arch=[256, 256]),\n              learning_rate=5e-4,\n              buffer_size=15000,\n              learning_starts=200,\n              batch_size=32,\n              gamma=0.8,\n              train_freq=1,\n              gradient_steps=1,\n              target_update_interval=50,",
        "detail": "single_agent.single_highway_modified_train",
        "documentation": {}
    },
    {
        "label": "test_env",
        "kind": 5,
        "importPath": "single_agent.single_highway_test",
        "description": "single_agent.single_highway_test",
        "peekOfCode": "test_env = gym.make(\"highway-v0\", render_mode='human')\n# Load and test saved model\nmodel = DQN.load(\"COMP0124_dqn/model_highway\")\n# test the model\nepisode_rewards = []\nnum_episodes = 20\nfor episode in range(num_episodes):\n  done = truncated = False\n  obs, info = test_env.reset()\n  total_rewards = 0",
        "detail": "single_agent.single_highway_test",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "single_agent.single_highway_test",
        "description": "single_agent.single_highway_test",
        "peekOfCode": "model = DQN.load(\"COMP0124_dqn/model_highway\")\n# test the model\nepisode_rewards = []\nnum_episodes = 20\nfor episode in range(num_episodes):\n  done = truncated = False\n  obs, info = test_env.reset()\n  total_rewards = 0\n  while not (done or truncated):\n    action, _states = model.predict(obs, deterministic=True)",
        "detail": "single_agent.single_highway_test",
        "documentation": {}
    },
    {
        "label": "episode_rewards",
        "kind": 5,
        "importPath": "single_agent.single_highway_test",
        "description": "single_agent.single_highway_test",
        "peekOfCode": "episode_rewards = []\nnum_episodes = 20\nfor episode in range(num_episodes):\n  done = truncated = False\n  obs, info = test_env.reset()\n  total_rewards = 0\n  while not (done or truncated):\n    action, _states = model.predict(obs, deterministic=True)\n    obs, reward, done, truncated, info = test_env.step(action)\n    total_rewards += reward",
        "detail": "single_agent.single_highway_test",
        "documentation": {}
    },
    {
        "label": "num_episodes",
        "kind": 5,
        "importPath": "single_agent.single_highway_test",
        "description": "single_agent.single_highway_test",
        "peekOfCode": "num_episodes = 20\nfor episode in range(num_episodes):\n  done = truncated = False\n  obs, info = test_env.reset()\n  total_rewards = 0\n  while not (done or truncated):\n    action, _states = model.predict(obs, deterministic=True)\n    obs, reward, done, truncated, info = test_env.step(action)\n    total_rewards += reward\n    test_env.render()",
        "detail": "single_agent.single_highway_test",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "single_agent.single_highway_train",
        "description": "single_agent.single_highway_train",
        "peekOfCode": "env = gym.make(\"highway-fast-v0\", render_mode='human')\nenv.config['lanes_count'] = 4  # Set the lane to 4\n# Initialize the DQN model for training\nmodel = DQN('MlpPolicy', env,\n              policy_kwargs=dict(net_arch=[256, 256]),\n              learning_rate=5e-4,\n              buffer_size=15000,\n              learning_starts=200,\n              batch_size=64,\n              gamma=0.8,",
        "detail": "single_agent.single_highway_train",
        "documentation": {}
    },
    {
        "label": "env.config['lanes_count']",
        "kind": 5,
        "importPath": "single_agent.single_highway_train",
        "description": "single_agent.single_highway_train",
        "peekOfCode": "env.config['lanes_count'] = 4  # Set the lane to 4\n# Initialize the DQN model for training\nmodel = DQN('MlpPolicy', env,\n              policy_kwargs=dict(net_arch=[256, 256]),\n              learning_rate=5e-4,\n              buffer_size=15000,\n              learning_starts=200,\n              batch_size=64,\n              gamma=0.8,\n              train_freq=1,",
        "detail": "single_agent.single_highway_train",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "single_agent.single_highway_train",
        "description": "single_agent.single_highway_train",
        "peekOfCode": "model = DQN('MlpPolicy', env,\n              policy_kwargs=dict(net_arch=[256, 256]),\n              learning_rate=5e-4,\n              buffer_size=15000,\n              learning_starts=200,\n              batch_size=64,\n              gamma=0.8,\n              train_freq=1,\n              gradient_steps=1,\n              target_update_interval=50,",
        "detail": "single_agent.single_highway_train",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "test.hetero_highway",
        "description": "test.hetero_highway",
        "peekOfCode": "env = gym.make(\"highway-hetero-v0\")\npprint.pprint(env.config)\nenv.config['controlled_vehicles'] = 3 # change the number of vehicles\nobs = env.reset()\npprint.pprint(env.config)    # Compare the difference between the two configs, other information in the config can also be modified\nfor _ in range(300):\n    action = env.action_type.actions_indexes[\"IDLE\"]\n    obs, reward, done, truncated, info = env.step(action)\n    images = env.render(mode='rgb_array')\n    plt.imshow(highway_images)",
        "detail": "test.hetero_highway",
        "documentation": {}
    },
    {
        "label": "env.config['controlled_vehicles']",
        "kind": 5,
        "importPath": "test.hetero_highway",
        "description": "test.hetero_highway",
        "peekOfCode": "env.config['controlled_vehicles'] = 3 # change the number of vehicles\nobs = env.reset()\npprint.pprint(env.config)    # Compare the difference between the two configs, other information in the config can also be modified\nfor _ in range(300):\n    action = env.action_type.actions_indexes[\"IDLE\"]\n    obs, reward, done, truncated, info = env.step(action)\n    images = env.render(mode='rgb_array')\n    plt.imshow(highway_images)\n    plt.show()",
        "detail": "test.hetero_highway",
        "documentation": {}
    },
    {
        "label": "obs",
        "kind": 5,
        "importPath": "test.hetero_highway",
        "description": "test.hetero_highway",
        "peekOfCode": "obs = env.reset()\npprint.pprint(env.config)    # Compare the difference between the two configs, other information in the config can also be modified\nfor _ in range(300):\n    action = env.action_type.actions_indexes[\"IDLE\"]\n    obs, reward, done, truncated, info = env.step(action)\n    images = env.render(mode='rgb_array')\n    plt.imshow(highway_images)\n    plt.show()",
        "detail": "test.hetero_highway",
        "documentation": {}
    }
]